name: fresco-deploy

#on:
#  push:
#    tags:
#      - '*'

on:
  push:
    branches:
      - main

jobs:
  infrastructure:
    runs-on: ubuntu-latest
    outputs:
      elastic_beanstalk_url: ${{ steps.terraform_outputs.outputs.elastic_beanstalk_url }}
      frontend_bucket_name: ${{ steps.terraform_outputs.outputs.frontend_bucket_name }}
      cloudfront_distribution_id: ${{ steps.terraform_outputs.outputs.cloudfront_distribution_id }}
      recipes_table_name: ${{ steps.terraform_outputs.outputs.recipes_table_name }}
      ingredients_table_name: ${{ steps.terraform_outputs.outputs.ingredients_table_name }}
      fresco_bucket_name: ${{ steps.terraform_outputs.outputs.fresco_bucket_name }}
      elastic_beanstalk_environment_name: ${{ steps.terraform_outputs.outputs.elastic_beanstalk_environment_name }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3

      - name: Terraform Init
        run: |
          terraform init \
            -backend-config="access_key=${{ secrets.AWS_ACCESS_KEY_ID }}" \
            -backend-config="secret_key=${{ secrets.AWS_SECRET_ACCESS_KEY }}"
        working-directory: deploy

      - name: Terraform Plan
        run: terraform plan -out=tfplan
        working-directory: deploy

      - name: Terraform Apply
        if: success()
        run: |
          terraform apply -auto-approve tfplan
        working-directory: deploy

      - name: Get Terraform Outputs
        id: terraform_outputs
        run: |
          echo "elastic_beanstalk_url=$(terraform output -raw elastic_beanstalk_url)" >> $GITHUB_OUTPUT
          echo "frontend_bucket_name=$(terraform output -raw frontend_bucket_name)" >> $GITHUB_OUTPUT
          echo "cloudfront_distribution_id=$(terraform output -raw cloudfront_distribution_id)" >> $GITHUB_OUTPUT
          echo "recipes_table_name=$(terraform output -raw recipes_table_name)" >> $GITHUB_OUTPUT
          echo "ingredients_table_name=$(terraform output -raw ingredients_table_name)" >> $GITHUB_OUTPUT
          echo "elastic_beanstalk_environment_name=$(terraform output -raw elastic_beanstalk_environment_name)" >> $GITHUB_OUTPUT
        working-directory: deploy

  frontend:
    needs: infrastructure
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: npm ci
        working-directory: frontend

      - name: Build frontend
        run: |
          echo "VITE_FRESCO_API_BASE_URL=https://${{ needs.infrastructure.outputs.elastic_beanstalk_url }}" > .env
          echo "Extracted Elastic Beanstalk URL: ${{ needs.infrastructure.outputs.elastic_beanstalk_url }}"
          npm run build
        working-directory: frontend

      - name: Deploy to S3
        run: |
          aws s3 sync dist/ s3://${{ needs.infrastructure.outputs.frontend_bucket_name }} --delete
        working-directory: frontend

      - name: Invalidate CloudFront
        run: |
          aws cloudfront create-invalidation --distribution-id ${{ needs.infrastructure.outputs.cloudfront_distribution_id }} --paths "/*"

  backend:
    needs: infrastructure
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-central-1

      - name: Set up JDK 11
        uses: actions/setup-java@v3
        with:
          java-version: '11'
          distribution: 'corretto'

      - name: Create application.conf
        run: |
          cat << EOF > src/main/resources/application.conf
          akka {
            loglevel = "INFO"
            loggers = ["akka.event.slf4j.Slf4jLogger"]
            license-key = "${{ secrets.AKKA_LICENSE_KEY }}"
          }

          fresco {
            env = "prod"

            routes {
              ask-timeout = 10s
            }

            prod {
              aws {
                storage {
                  recipesTableName = "${{ needs.infrastructure.outputs.recipes_table_name }}"
                  ingredientsTableName = "${{ needs.infrastructure.outputs.ingredients_table_name }}"
                  bucketName = "${{ needs.infrastructure.outputs.fresco_bucket_name }}"
                }
              }
            }
          }
          EOF
        working-directory: backend

      - name: Build Scala application
        run: sbt clean assembly
        working-directory: backend

      - name: Upload JAR to S3
        run: |
          aws s3 cp target/scala-3.3.3/backend-assembly.jar s3://${{ needs.infrastructure.outputs.fresco_bucket_name }}/backend-assembly.jar
        working-directory: backend

      - name: Deploy to Elastic Beanstalk
        run: |
          aws elasticbeanstalk create-application-version \
            --application-name fresco-backend \
            --version-label ${{ github.sha }} \
            --source-bundle S3Bucket=${{ needs.infrastructure.outputs.fresco_bucket_name }},S3Key=backend-assembly.jar

          aws elasticbeanstalk update-environment \
            --environment-name ${{ needs.infrastructure.outputs.elastic_beanstalk_environment_name }} \
            --version-label ${{ github.sha }}
